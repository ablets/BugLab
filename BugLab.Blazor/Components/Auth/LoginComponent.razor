@inject HttpClient Client
@inject AuthState AuthState
@inject NavigationManager Nav
@inject ISnackbar Snackbar

<EditForm Model="_model" OnValidSubmit="OnSubmit">
    <FluentValidationValidator />
    <MudTextField @bind-Value="_model.Email" InputType="InputType.Email" Label="Email" For="() => _model.Email"
                  AdornmentColor="@Color.Primary" AdornmentIcon="@Icons.Material.Filled.Email" Adornment="Adornment.End" Variant="Variant.Filled">
    </MudTextField>
    <MudTextField @bind-Value="_model.Password" InputType="InputType.Password" Label="Password" For="() => _model.Password"
                  AdornmentColor="@Color.Primary" AdornmentIcon="@Icons.Material.Filled.Password" Adornment="Adornment.End" Variant="Variant.Filled">
    </MudTextField>
    <MudButton Color="Color.Primary" ButtonType="ButtonType.Submit">Login</MudButton>
    <MudButton Color="Color.Primary" OnClick="SampleUserLogin">Login with sample user</MudButton>
</EditForm>

@code{
    private LoginRequest _model = new();
    private LoginValidator _validator = new();

    public async Task OnSubmit()
    {
        var response = await Client.PostAsJsonAsync($"{Endpoints.Auth}/login", _model);

        var user = await response.Content.ReadFromJsonAsync<LoginResponse>();
        if (!user.EmailConfirmed)
        {
            Snackbar.Add("Confirm your email! Click here to resend the confirmation mail", Severity.Warning, opt =>
            {
                opt.VisibleStateDuration = 10000;
                opt.Onclick = async (e) =>
                {
                    await Client.PostAsync($"{Endpoints.Auth}/{user.Id}/resend-confirm-email", null);
                };
            });
        }

        await AuthState.LogInAsync(user);
        Nav.NavigateTo("/");
    }

    public async Task SampleUserLogin()
    {
        _model.Email = "chris@gmail.com";
        _model.Password = "Password123.";
        await OnSubmit();
    }
}