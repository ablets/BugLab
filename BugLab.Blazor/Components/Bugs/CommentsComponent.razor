@inject HttpClient Client
@inject IDialogService Dialog

<MudContainer Class="ml-5">
    <MudButton Color="Color.Primary" OnClick="async () => await NewCommentDialog()">New Comment</MudButton>

    @foreach (var comment in Comments)
    {
        <MudCard Class="mb-5 comment-card">
            <MudCardContent>
                <MudText Color="Color.Primary">Created on @comment.Created.ToLocalTime() by @comment.CreatedBy.Email</MudText>
                @if (comment.Modified.HasValue)
                {
                    <MudText>Modified on @comment.Modified.Value.ToLocalTime() by @comment.ModifiedBy.Email</MudText>
                }
                <MudText style="white-space: pre-line">@comment.Text</MudText>
            </MudCardContent>
            <MudCardActions>
                <MudIconButton Size="Size.Small" OnClick="async () => await EditCommentDialog(comment)" Icon="@Icons.Material.Filled.Edit"
                               Variant="Variant.Outlined" Color="Color.Primary" />

                <MudIconButton OnClick="async () => await RemoveComment(comment.Id)" Icon="@Icons.Material.Filled.DeleteForever" Color="Color.Error"
                               Class="ml-3" Variant="Variant.Outlined" Size="Size.Small" />
            </MudCardActions>
        </MudCard>
    }
</MudContainer>
@code {
    [Parameter] public ICollection<CommentResponse> Comments { get; set; }
    [Parameter] public int BugId { get; set; }

    public async Task EditCommentDialog(CommentResponse comment)
    {
        var dialogParams = new DialogParameters
{
            { nameof(UpsertCommentDialog.Comment), comment },
            { nameof(UpsertCommentDialog.BugId), BugId },
        };

        var dialog = Dialog.Show<UpsertCommentDialog>("Edit comment", dialogParams, new DialogOptions { CloseButton = true });

        var result = await dialog.Result;
        if (result.Cancelled)
        {
            return;
        }

        Comments = (await Client.GetFromJsonAsync<BugResponse>($"{Endpoints.Bugs}/{BugId}", JsonOptions.Defaults())).Comments;
    }

    public async Task RemoveComment(int id)
    {
        var result = await Dialog.ShowMessageBox($"Deleting Comment",
           "This cannot be undone", "OK", "Cancel");

        if (!result.HasValue || !result.Value) return;

        await Client.DeleteAsync($"{Endpoints.Comments(BugId)}/{id}");
        Comments.Remove(Comments.First(c => c.Id == id));
    }

    private async Task NewCommentDialog()
    {
        var dialogParams = new DialogParameters
{
            { nameof(UpsertCommentDialog.BugId), BugId }
        };

        var dialog = Dialog.Show<UpsertCommentDialog>("New comment", dialogParams, new DialogOptions { CloseButton = true });

        var result = await dialog.Result;
        if (result.Cancelled)
        {
            return;
        }

        Comments = (await Client.GetFromJsonAsync<BugResponse>($"{Endpoints.Bugs}/{BugId}", JsonOptions.Defaults())).Comments;
    }
}

<style>
    .comment-card {
        width: 100%
    }
</style>