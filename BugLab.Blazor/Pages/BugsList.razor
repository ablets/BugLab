@page "/project/{projectId:int}/bugs"
@page "/my-bugs"

@inject NavigationManager Nav
@inject HttpClient Client

@if (ProjectId.HasValue)
{
    <MudContainer Class="d-flex">
        <MudButton Class="mb-5" OnClick="() => _showAddBug = !_showAddBug" Color="Color.Primary">@(_showAddBug ? "Hide" : "New bug")</MudButton>
        <MudButton Class="mb-5 ml-5" OnClick="() => _showAddBugType = !_showAddBugType" Color="Color.Primary">@(_showAddBugType ? "Hide" : "New bug type")</MudButton>
    </MudContainer>
    <MudContainer Class="mb-5 d-flex">
        @if (_showAddBug)
        {
            <AddBugComponent BugTypes="_bugTypes" OnAdd="OnBugAdded" ProjectId="ProjectId.Value" />
        }

        @if (_showAddBugType)
        {
            <AddBugTypeComponent ProjectId="ProjectId.Value" OnAdd="OnBugTypeAdded" />
        }
    </MudContainer>
}

<MudTable ServerData="@(new Func<TableState, Task<TableData<BugResponse>>>(GetBugs))"
          @ref="_table" Striped="true" Hover="true" RowsPerPage="6" Dense="true">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Bugs</MudText>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Title</MudTh>
        <MudTh>Type</MudTh>
        <MudTh>Status</MudTh>
        <MudTh>Priority</MudTh>
        <MudTh>Created On</MudTh>
        <MudTh>Modified On</MudTh>
        <MudTh>Project</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd><MudButton Color="Color.Primary" @onclick="async () => await SelectedBugChanged(context)">@context.Title</MudButton> </MudTd>
        <MudTd>
            <MudChip Style="@($"{Css.BgColor} {context.BugType.Color}; {Css.Color} #fff")">@context.BugType.Title</MudChip>
        </MudTd>
        <MudTd>@context.Status</MudTd>
        <MudTd>@context.Priority</MudTd>
        <MudTd>@context.Created.ToLocalTime()</MudTd>
        <MudTd>@context.Modified?.ToLocalTime()</MudTd>
        <MudTd>@context.ProjectTitle</MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager PageSizeOptions="_pageSizeOptions" RowsPerPageString="Bugs per page" />
    </PagerContent>
</MudTable>

@if (ProjectId.HasValue)
{
    <MudButton OnClick="@(async () => { Nav.NavigateTo("/my-bugs"); ProjectId = null; await _table.ReloadServerData();  })">back to my bugs</MudButton>
}

@if (_selectedBug != null)
{
    <MudContainer Class="d-flex mt-5 mb-5">
        <MudItem id="bug-card">
            <BugCardComponent OnDelete="OnBugDeleted" BugTypes="_bugTypes" OnUpdate="OnBugUpdated" Bug="_selectedBug" />
        </MudItem>
        <CommentsListComponent Comments="_selectedBug.Comments" />
    </MudContainer>
}

@code{
    private MudTable<BugResponse> _table;
    private int[] _pageSizeOptions = { 2, 4, 6, 8, 10, 15, 20 };
    private BugResponse _selectedBug;
    private bool _showAddBug;
    private bool _showAddBugType;

    [Parameter] public int? ProjectId { get; set; }
    private List<BugTypeResponse> _bugTypes;

    protected override async Task OnParametersSetAsync()
    {
        if (ProjectId.HasValue) await LoadBugTypes(ProjectId.Value);
    }

    private async Task LoadBugTypes(int projectId)
    {
        _bugTypes = (await Client.GetFromJsonAsync<IEnumerable<BugTypeResponse>>(Endpoints.BugTypes(projectId))).ToList();
    }

    private async Task OnBugTypeAdded(int id)
    {
        var bugType = await Client.GetFromJsonAsync<BugTypeResponse>($"{Endpoints.BugTypes(ProjectId.Value)}/{id}");
        _bugTypes.Add(bugType);
    }

    public async Task SelectedBugChanged(BugResponse bug)
    {
        if (!ProjectId.HasValue)
        {
            await LoadBugTypes(bug.ProjectId);
        }

        _selectedBug = bug;
    }

    public async Task<TableData<BugResponse>> GetBugs(TableState state)
    {
        var request = QueryBuilder.Use(Endpoints.Bugs)
            .WithParam(nameof(PaginationHeader.PageNumber), state.Page + 1)
            .WithParam(nameof(state.PageSize), state.PageSize);

        if (ProjectId != default) request.WithParam(nameof(ProjectId), ProjectId);

        var response = await Client.GetAsync(request.Build());
        var jsonPaginationInfo = response.Headers.GetValues("pagination").First();
        var paginationInfo = JsonSerializer.Deserialize<PaginationHeader>(jsonPaginationInfo, new JsonSerializerOptions(JsonSerializerDefaults.Web));

        return new TableData<BugResponse>
        {
            Items = await response.Content.ReadFromJsonAsync<IEnumerable<BugResponse>>(JsonOptions.Defaults()),
            TotalItems = paginationInfo.TotalItems
        };
    }

    public async Task OnBugAdded(int id)
    {
        _showAddBug = false;
        _selectedBug = await Client.GetFromJsonAsync<BugResponse>($"{Endpoints.Bugs}/{id}", JsonOptions.Defaults());

        await _table.ReloadServerData();
    }

    public async Task OnBugUpdated()
    {
        await _table.ReloadServerData();
    }

    public async Task OnBugDeleted()
    {
        _selectedBug = null;
        await _table.ReloadServerData();
    }
}

<style>
    #bug-card {
        width: 100%;
    }
</style>
