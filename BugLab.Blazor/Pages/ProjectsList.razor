@page "/projects"

@inject HttpClient Client

<MudTable ServerData="@(new Func<TableState, Task<TableData<ProjectResponse>>>(GetProjects))"
          @ref="_table" RowStyleFunc="RowStyleFunc" Dense="true" Hover="true" Striped="true">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Projects</MudText>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Title</MudTh>
        <MudTh>High prioritized bugs</MudTh>
        <MudTh>Bugs</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd Class="text-l">@context.Title</MudTd>
        <MudTd>@context.TotalHighPriorityBugs</MudTd>
        <MudTd>@context.TotalBugs</MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager PageSizeOptions="_pageSizeOptions" RowsPerPageString="Projects per page" />
    </PagerContent>
</MudTable>

@code{

    private MudTable<ProjectResponse> _table;
    private int[] _pageSizeOptions = { 2, 4, 6, 8, 10, 15, 20 };

    public async Task<TableData<ProjectResponse>> GetProjects(TableState state)
    {
        var request = QueryBuilder.Use(Endpoints.Projects)
            .WithParam(nameof(PaginationHeader.PageNumber), state.Page)
            .WithParam(nameof(state.PageSize), state.PageSize)
            .Build();

        var response = await Client.GetAsync(request);
        var jsonPaginationInfo = response.Headers.GetValues("pagination").First();
        var paginationInfo = JsonSerializer.Deserialize<PaginationHeader>(jsonPaginationInfo, new JsonSerializerOptions(JsonSerializerDefaults.Web));

        return new TableData<ProjectResponse>
        {
            Items = await response.Content.ReadFromJsonAsync<IEnumerable<ProjectResponse>>(),
            TotalItems = paginationInfo.TotalItems
        };
    }

    public string RowStyleFunc(ProjectResponse item, int index)
    {
        return item.TotalHighPriorityBugs switch
        {
            > 10 => $"{Css.BgColor}red",
            >= 5 and < 10 => $"{Css.BgColor}yellow",
            _ => $"{Css.BgColor}white"
        };
    }
}
